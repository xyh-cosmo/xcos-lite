###################
#   t,T = true    #
#   f,F = false   #
###################

#############################################################
#   imcmc sampler settings
#############################################################

#   how many walkers?
walker_num = 240

#   how many steps needed to finish the burn-in
burnin_step = 5000

#	how many steps will you skip after finishing a chain?
#   this number is actually skip_step * walker_num
skip_step = 200

#   how many chains will be output?
#   if more than one chains are requested, then we re-do the "burn in" for each chain before writing
#   samples into chain files.
chain_num = 5

#   size of each chain
sample_step = 2000

#   sampling efficiency controling parameter, smaller will produce greater acceptance ratio,
#   should always be greater than 1, if not it will be tranformed into 1/a internally ( must be a positive number)
efficient_a = 1.5

init_ball_radius = 0.5

save_burned_ashes = F

save_state_for_N_steps = 0
start_from_check_point = F

T_cool = 1

#   root of filenames of the chain files, if more than one, the filenames will be chain_root_i.txt
#chain_root = 
KEY_CHAIN_ROOT

debug_dir=debug

####################################################################################################
#	if absent or left empty, default value:1000 will be used, the default value can be modified in
#	Background.hpp
background_array_size=100


#   Hubble constant, setting H0 is perfered, but you can also choose to set h instead of H0.
;H0	=	70, 50, 80
H0      = 70
;h      = .7, .5, .8

###########################################################
###	tabulated Hubble parameter or cosmic expansion rate ###
###########################################################
use_tabulated_E = true
E_bin_num = 6
use_eta2E = T

KEY_E_INTERP

#	E_table_zmax is needed when E_table_z is not set or has wrong number of redshfits
E_table_zmax = 1.30

#   if set redshifts and the number of redshifts are the same as num_of_Ei, then use the user
#   provided redshifts [ note that z=0 is actually not sampled ]
;E_table_z = 0.23,  0.46,  0.69,  0.92,  1.15,  1.414		#   for UNION2.1
;E_table_z   = 0.23,  0.46,  0.69,  0.92,  1.15,  1.39		#   for SNLS
;E_table_z   = 0.23,  0.46,  0.69,  0.92,  1.15,  1.30		#   for JLA

E1         = 1.04769  #1        3.5 	    # z_1  = 0.1
E2         = 1.14513  #1        3.5  	# z_2  = 0.271429
E3         = 1.2614   #1        3.5 	    # z_3  = 0.442857
E4         = 1.39498  #1        3.5 	    # z_4  = 0.614286
E5         = 1.54428  #1        3.5 	    # z_5  = 0.785714
E6         = 2.2  	  1        3.5 	    # z_6  = 0.957143
E7         = 1.88415  1        3.0  	# z_7  = 1.12857
E8         = 1.9      1        3.5 	    # z_8  = 1.3
E9         = 2.07226  1        3.0 	    # z_8  = 1.3

E_table_z = 0.2 0.4 0.6 0.8 1.0 1.3
;E_table_z   = 0.23,  0.46,  0.69,  0.92,  1.15,  1.30		#   for JLA
; E_table_z = 0.1     0.2714  0.4429  0.6143  0.7857  0.9571  1.129   1.3

;E_table_z = 0.15 0.3 0.45 0.6 0.75 0.9 1.05 1.2 1.3

eta1    = 0.5   0.0     1.0
eta2    = 0.5   0.0     1.0
eta3    = 0.5   0.0     1.0
eta4    = 0.5   0.0     1.0
eta5    = 0.5   0.0     1.0
eta6    = 0.5   0.0     1.0
eta7    = 0.5   0.0     1.0
eta8    = 0.5   0.0     1.0
eta9    = 0.5   0.0     1.0

#############################################################
#   Paramters to output into *.txt chains
#   NOTE: names are case sensitive  !!!
#   the output order is exactly the same as you listed. If output_params is not set, then the output
#   order might be as good as you wish, the order is determined by C++ map<> internally ... so I
#   suggest you write down all the parameters of intersts in the order you like.

;output_params = E1 E2 E3 E4 E5 E6 alpha_jla beta_jla MB_jla DeltaMB_jla

has_derived_params = T
;output_params = E1 E2 E3 E4 E5 E6
;output_params =  eta1 eta2 eta3 eta4 eta5 alpha_jla beta_jla MB_jla DeltaMB_jla E6
output_params = MB E6
;output_params = alpha_jla beta_jla MB_jla DeltaMB_jla H0 E1 E2 E3 E4 E5 E6
output_dparams= derived_E1 derived_E2 derived_E3 derived_E4 derived_E5
;output_dparams = H_1 H_2 H_3 H_4 H_5

derive_hubble_rate = F 
derive_H_at_z = 0.2 0.4 0.6 0.8 1.0

#########################
#####   data sets   #####
#########################
use_sne             = T
use_cmb             = F
use_bao				= F
use_hubble          = F
use_HST				= F
use_dde_cpz 		= F

use_union 			= F
use_snls 			= F
use_jla 			= F

use_mock_sne        = T
use_wfirst_mock     = F
use_snls_jla_mock   = T

use_mock_cmb 		= F

#########################
####	HST		#########
#########################
##	HST prior, default {73.8,2.4} will be used if the following are commented out
#HST_H0			= 70.6
#HST_Sigma_H0	= 3.3

HST_H0			= 73.24
HST_Sigma_H0	= 1.74
############################################################
#   3 SNe datastes: "ONLY one can be used each time"
#	light curve parameter priors are set below

#   Union2.1 compilation assumed H0 = 70 km/s/Mpc
#   NOTE: cosmomc used the marginalized covariance matrix (over H0 or MB)

mock_wfirst_datafile = mock_DH/wfirst_LCDM_int_0.09_0.0_meas_0.08_lens_0.07_sys_0.02.txt
mock_wfirst_has_error    = F
SN_flux_as_obs = F

# SNLS and/or JLA mock smaples.
KEY_JLA_MOCK
;mock_snls_jla_datafile = SNe4Hz/mock_JLA/MOCK_JLA_1.txt
KEY_JLA_COV
;mock_snls_jla_covmat = SNe4Hz/data/JLA_cov.txt
;mock_snls_jla_icovmat = data/mock_snls_jla/jla_covmat_inv.txt
mock_snls_jla_has_err = T
mock_snls_jla_use_full_covmat = T

# absolute magnitude settings
mock_marg_MB = F
mock_MB_use_Gaussian_Prior = F
MB	= -19.3  -19.8  -18.8
MB_std = 0.03

#   UNION2.1
union2.1_dataset 	= data/Union2.1/union2.1.dataset
union2.1_with_sys 	= true

#   SNLS3
snls_dataset 		= data/SNLS/snls_3rdyear.dataset
use_four_disp		= true

#   JLA
jla_dataset			= data/JLA/jla.dataset

#   fidual values for light curve nuisance paramters and (flat) priors
alpha_snls	    = 1.451, 1.00, 2.00
beta_snls	    = 3.200, 1.75, 3.75
scriptMB_snls	= 23.60, 23.0, 24.5

alpha_jla       =  0.135    0.1     0.17
beta_jla        =  3.14     2.75    3.45
MB_jla          =  -19.05   -19.25  -18.75
DeltaMB_jla     =  -0.07    -0.175   0.025
